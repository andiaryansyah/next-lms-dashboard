

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id String @id
  username String @unique

  userId    String @unique
  user      User   @relation(fields: [userId], references: [id])
}

model Student {
  id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String? @unique
  address String
  img String?
  gender UserGender
  createdAt DateTime @default(now())
  parentId String
  parent Parent? @relation(fields: [parentId], references: [id])
  classId Int
  class Class @relation(fields: [classId], references: [id])
  gradeId Int
  grade Grade @relation(fields: [gradeId], references: [id])
  attendance Attendance[]
  results Result[]
  birthday DateTime

  userId    String @unique
  user      User   @relation(fields: [userId], references: [id])
}

model Teacher {
  id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String? @unique
  address String
  img String?
  gender UserGender
  createdAt DateTime @default(now())
  subjects Subject[] 
  lessons Lesson[]
  classes Class[]
  birthday DateTime

  userId    String @unique
  user      User   @relation(fields: [userId], references: [id])
}

model Parent {
  id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String @unique
  address String
  createdAt DateTime @default(now())
  students Student[]

  userId    String @unique
  user      User   @relation(fields: [userId], references: [id])
}

model Grade {
  id Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classes Class[]
}

model Class {
  id Int @id @default(autoincrement())
  name String @unique
  capacity Int
  supervisorId String?
  supervisor Teacher? @relation(fields: [supervisorId], references: [id])
  lessons Lesson[]
  students Student[]
  gradeId Int
  grade Grade @relation(fields: [gradeId], references: [id])
  events Event[]
  announcements Announcement[]
}

model Subject {
  id Int @id @default(autoincrement())
  name String @unique
  teachers Teacher[]
  lessons Lesson[]
}

model Lesson {
  id Int @id @default(autoincrement())
  name String @unique
  day Day
  startTime DateTime
  endTime DateTime
  subjectId Int
  subject Subject @relation(fields: [subjectId], references: [id])
  classId Int
  class Class @relation(fields: [classId], references: [id])
  teacherId String
  teacher Teacher @relation(fields: [teacherId], references: [id])
  exams Exam[]
  assignments Assignment[]
  attendance Attendance[]
}

model Exam {
  id Int @id @default(autoincrement())
  title String
  startTime DateTime
  endTime DateTime
  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
  results Result[]
}

model Assignment {
  id Int @id @default(autoincrement())
  title String
  startDate DateTime
  dueDate DateTime
   lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
  results Result[]
}

model Result {
  id Int @id @default(autoincrement())
 score Int

 examId Int?
 exam Exam? @relation(fields: [examId], references: [id])
 assignmentId Int?
 assignment Assignment? @relation(fields: [assignmentId], references: [id])
 studentId String
  student Student @relation(fields: [studentId], references: [id])
}

model Attendance {
  id Int @id @default(autoincrement())
  date DateTime
  present Boolean
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
}

model Event {
  id Int @id @default(autoincrement())
  title String
  description String
  startTime DateTime
  endTime DateTime
  classId Int?
  class Class? @relation(fields: [classId], references: [id])
  
}

model Announcement {
id Int @id @default(autoincrement())
  title String
  description String
  date DateTime
  classId Int?
  class Class? @relation(fields: [classId], references: [id])
 
}

model Message {
  id Int @id @default(autoincrement())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  displayName String

  senderId   String
  receiverId String

  sender   User @relation("MessagesSent", fields: [senderId], references: [id])
  receiver User @relation("MessagesReceived", fields: [receiverId], references: [id])
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  role        Role
  displayName String

  messagesSent     Message[] @relation("MessagesSent")
  messagesReceived Message[] @relation("MessagesReceived")

  admin    Admin?
  teacher  Teacher?
  student  Student?
  parent   Parent?
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum UserGender {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}